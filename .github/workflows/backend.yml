name: Build & Deploy Backend

on:
  push:
    branches: [ main ]
    paths: [ 'backend/**' ]

env:
  IMAGE_NAME: ghcr.io/mrigankkh/good-first-issue/fastapi


jobs:
  build:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest

    # Declare job outputs
    outputs:
      image: ${{ steps.publish-image.outputs.image }}

    steps:
      - uses: actions/checkout@v4

      - name: Log in to GHCR
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_TOKEN }}

      - name: Build & push Docker image
        id: publish-image
        run: |
          IMAGE=${{ env.IMAGE_NAME }}:${{ github.sha }}
          docker build -t $IMAGE ./backend
          docker push $IMAGE
          # publish the image name as a step output
          echo "image=$IMAGE" >> $GITHUB_OUTPUT

      - name: Clean up old GHCR versions
        uses: dawidd6/action-delete-package-versions@v2
        with:
          
          github-token: ${{ secrets.GITHUB_TOKEN }}
          package-type: container
        
          package-name: fastapi
        
          keep: 2
     


  deploy:
    name: Deploy to Azure
    runs-on: ubuntu-latest
    needs: build

    steps:
      # 1) Log in to Azure
      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      # 2) Update your FastAPI app to the new image
      - name: Update FastAPI Container App
        uses: azure/CLI@v1
        with:
          inlineScript: |
            az containerapp update \
              --name fgi-fastapi-server \
              --resource-group gfi-server \
              --image ${{ needs.build.outputs.image }}

      # 3) Update the scheduled job to the new image
      # - name: Update Scheduled Job
      #   uses: azure/CLI@v1
      #   with:
      #     inlineScript: |
      #       az containerapp job update \
      #         --name db-refresh \
      #         --resource-group gfi-server \
      #         --image ${{ needs.build.outputs.image }}
